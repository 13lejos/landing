body{
    min-height: 100vh;
    margin: 0;
    display: flex;
    flex-direction: column;
    font-family: "Roboto", sans-serif;
}

/* header bar and styling to make links look nice */
.header{
    display: flex;
    align-items: center;
    gap: 20px;
    justify-content: space-between;
    background-color: #1F2937;
    padding: 30px;
}

.logo{
    font-weight: bold;
    color: #FAF9F8;
}

.link{
    list-style-type: none;
    display: flex;
    margin: 0;
    padding: 0;
    gap: 20px
}

.link a, a:visited{
    color: #E5E7EB;
    text-decoration: none;
}

/* center content is comprised of 4 large containers*/

.content{
    display: flex;
    flex-direction: column;
    flex: 1;

}
/* stack our 4 containers and set ther size*/

.container1, .container2, .container3, .container4{
    display: flex;
    flex: 1;
    min-height: 500px;
    justify-content: center;
    align-items: center;
}

/*  container 1 contains 2 sub containers that hold our image as well as our
    sign up area */

.container1{
    background-color: #1F2937;
    display: flex;
    padding-left: 100px;
    padding-right: 100px;
    flex-direction: row;
    gap: 50px;
    }

    .signup{
        display: flex;
        flex-direction: column;
    }
    
    .signuphead{
        font-size: 48px;
        font-weight:bolder;
        color: #FAF9F8;
        margin: 0;
    }
    
    .signupwelcome{
        color: white;
    }
    
    .signupbutton{
        background-color: #3882F6;
        border-radius: 6px;
        color: white;
        padding: 4px 24px 4px 24px;
        align-self: start; 
        border-style: none;
        cursor: pointer;
    }
    .signupimg{
        flex: 0 0 auto;
        height: 350px;
        width: 400px;
    }
    
     .signupimg > img{
        width: 100%;
        height: 100%;
     }
    
/* container 2 holds 4 images and their text, the text wraps, but the images stay
static */

.container2{
    background-color: white;
    display: flex;
    flex-direction: column;
}

.howto{
    font-size: 32px;
    font-weight: bold;
}
.howtoimg{
    display: flex;
    gap: 60px;
}

.play, .notes, .upload, .win{
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    max-width: 200px;
    height: auto;
}

/* container 3 is a quote in a block centered, te box does not resize, the
quote attribution is right aligned */

.container3{
    background-color: #E5E7EB;
    display: flex;
    flex-direction: column;
}
.suntzu{
    text-align: left;
    width: 500px;
    height: auto;
    font-size: 24px;
    font-style: italic;
    color: #1F2937;
}

.quoteattribution{
    text-align: right;
    font-weight: bold;
    font-size: 16px;
    color: #1F2937;
}

/* container 4 contains 2 text sections on the left, and a button that is 
centered */
.container4{
    background-color: white;
}


.calltoaction{
    display: flex;
    background-color: #3882F6;
    border-radius: 12px;
    padding: 24px 50px 24px 50px;
    flex: 1;
    justify-content: space-between;
    max-width: 700px;
}
.discordtext{
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.discordinfo{
    color: #E5E7EB;
    margin:0;
}

.discordheader{
    font-size: 18px;
    font-weight: bold;
    color: white;
    margin: 0;
}

.discordbutton{
    align-self: center;
    background-color: #3882F6;
    border: 2px white solid;
    color: white;
    border-radius: 12px;
    padding: 3px 12px 3px 12px;
    cursor: pointer;

}

/* our footer stays at the bottom and marks the end of the page */
.footer{
    height: 72px;
    background-color: #1F2937;
    margin-top: auto;
    color: #FAF9F8;
    display: flex;
    align-items: center;
    justify-content: center;
}
/* The font that’s being used in the images is roboto.
Hero text is the statement that appears at the top of a web page.

There are many ways to tackle a project like this, and it can be overwhelming to look at a blank HTML document and not know where to start. 
Our suggestion: take it one section at a time. The website you’re creating has 4 main sections (and a footer), so pick one and get it into pretty good shape before moving on. 
Starting at the top is always a solid plan.

For the section you’re working on, begin by getting all the content onto the page before beginning to style it. In other words, do the HTML and then do the CSS. 
You’ll probably have to go back to the HTML once you start styling, but bouncing back and forth from the beginning will take more time and may cause more frustration. 
(Note: you don’t need to use more than one stylesheet. Using only one CSS file is adequate for this project).

Many of the elements on this page are very similar to things you saw in our flexbox exercises… feel free to go back to those if you need a refresher.
Do not worry about making your project look nice on a mobile device. We’ll learn that later.
When you finish, don’t forget to push it up to GitHub! */